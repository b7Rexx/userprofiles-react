{"version":3,"sources":["js/components/card.js","js/components/home.js","js/actions/index.js","js/constants/action-types.js","js/components/login.js","js/components/tag.js","js/components/profile.js","js/App.js","serviceWorker.js","js/reducers/index.js","js/store/index.js","index.js"],"names":["Card","color","this","props","className","style","background","src","image","alt","getColor","title","detail","width","onClick","havingImage","noImage","Component","ConnectedHome","userList","users","map","item","key","id","undefined","profileImage","firstName","lastName","email","getUserProfile","Home","connect","state","dispatch","fetch","then","res","json","data","type","payload","itemId","Login","Tag","faIcon","ConnectedProfile","prevProps","prevState","snapshot","address","street","city","country","phone","getAddress","Profile","profile","ConnectedApp","activeNav","EnhancedHome","loggedStatus","EnhancedUser","to","changeNavEvent","getRoutePath","withAuth","App","nav","Boolean","window","location","hostname","match","initialState","testapi","profileId","rootReducer","action","Object","assign","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae404c90.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Card extends Component {\n\n  getColor() {\n    return {color: this.props.color};\n  }\n\n  havingImage() {\n    return (\n      <div className='card-component clearfix' style={{background: this.props.background}}>\n        <div className='card-img'>\n          <img src={this.props.image} alt=\"image\"/>\n        </div>\n        <div className='card-text' style={this.getColor()}>\n          <strong>{this.props.title}</strong>\n          <p>{this.props.detail}</p>\n        </div>\n      </div>\n    );\n  }\n\n  noImage() {\n    return (\n      <div className='card-component clearfix' style={{background: this.props.background}}>\n        <div className='card' style={this.getColor()}>\n          <strong>{this.props.title}</strong>\n          <p>{this.props.detail}</p>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <li style={{width: this.props.width}} onClick={this.props.onClick}>\n        {this.props.image ? this.havingImage() : this.noImage()}\n      </li>\n    );\n  }\n}\n\nexport default Card;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {userList, userProfile} from \"../actions\";\nimport Card from \"./card\";\n\nconst mapStateToProps = state => {\n  return {users: state.users};\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    userList: () => (\n      fetch('https://mock-io.herokuapp.com/users')\n        .then(res => res.json())\n        .then(data => dispatch(userList(data)))\n    ),\n    getUserProfile: itemId => dispatch(userProfile(itemId))\n  };\n}\n\nclass ConnectedHome extends Component {\n  componentDidMount() {\n    this.props.userList();\n  }\n\n  render() {\n    return (\n      <div className='user-list'>\n        <ul className='clearfix'>\n          {this.props.users.map(item => (\n            <Card\n              key={item.id}\n              id={item.id}\n              width={300}\n              background={(item.id % 5 === 0) ? 'green' : undefined}\n              color={(item.id % 2 === 0) ? 'blue' : undefined}\n              image={item.profileImage}\n              title={item.firstName + item.lastName}\n              detail={item.email}\n              onClick={() => this.props.getUserProfile(item.id)}\n            />))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst Home = connect(mapStateToProps, mapDispatchToProps)(ConnectedHome);\n\nexport default Home;\n","import {LOGGED_STATUS, ACTIVE_NAV, USER_LIST, USER_PROFILE} from \"../constants/action-types\";\n\nexport function userList(payload) {\n  return {type: USER_LIST, payload};\n}\n\nexport function activeNav(payload) {\n  return {type: ACTIVE_NAV, payload};\n}\n\nexport function loggedStatus(payload) {\n  return {type: LOGGED_STATUS, payload};\n}\n\nexport function userProfile(payload) {\n  return {type: USER_PROFILE, payload};\n}\n","export const LOGGED_STATUS = 'LOGGED_STATUS';\nexport const ACTIVE_NAV = 'ACTIVE_NAV';\nexport const USER_LIST = 'USER_LIST';\nexport const USER_PROFILE = 'USER_PROFILE';","import React, {Component} from 'react';\n\nclass Login extends Component {\n  render() {\n    return (\n      <div>\n        Login\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from 'react';\n\n\nfunction Tag(props) {\n  return (\n    <div className='tag'>\n      <i className={'fa fa-' + (props.faIcon)}/>\n      <span>{props.title}</span>\n    </div>\n  );\n}\n\nexport default Tag;","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport Tag from \"./tag\";\n\nconst mapStateToProps = state => {\n  return state.profile;\n};\n\nclass ConnectedProfile extends Component {\n  componentDidUpdate(prevProps, prevState, snapshot) {\n  }\n\n  getAddress() {\n    return this.props.address.street + ', ' + this.props.address.city + ', ' + this.props.address.country;\n  }\n\n  render() {\n    return (\n      <div className='user-profile'>\n        <div className='profile-image'>\n          <img src={this.props.profileImage} alt=\"image\"/>\n        </div>\n        <div className='profile-detail'>\n          <h1>{this.props.firstName} {this.props.lastName}</h1>\n          <Tag faIcon='envelope' title={this.props.email}/>\n          <Tag faIcon='phone' title={this.props.phone}/>\n          <Tag faIcon='map' title={this.getAddress()}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Profile = connect(mapStateToProps)(ConnectedProfile);\n\nexport default Profile;\n","import React, {Component} from 'react';\nimport {\n  BrowserRouter as Router,\n  Link\n} from 'react-router-dom';\nimport Home from './components/home';\nimport Login from './components/login';\nimport Profile from \"./components/profile\";\nimport {connect} from \"react-redux\";\nimport {activeNav} from \"./actions\";\n\nconst mapStateToProps = state => {\n  return state;\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeNavEvent: (nav) => dispatch(activeNav(nav))\n  };\n}\n\nclass ConnectedApp extends Component {\n\n  getRoutePath() {\n    switch (this.props.activeNav) {\n      case \"home\":\n        return <EnhancedHome loggedStatus={this.props.loggedStatus}/>;\n      default:\n        return <EnhancedUser loggedStatus={this.props.loggedStatus}/>;\n    }\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <Router>\n          <div>\n            <nav className='navbar clearfix'>\n              <ul>\n                <li className={(this.props.activeNav === 'home') ? 'active' : ''}>\n                  <Link to='/' onClick={() => this.props.changeNavEvent('home')}>Home</Link>\n                </li>\n                <li className={(this.props.activeNav === 'profile') ? 'active' : ''}>\n                  <Link to='/profile' onClick={() => this.props.changeNavEvent('profile')}>My Profile</Link>\n                </li>\n              </ul>\n            </nav>\n\n            {this.getRoutePath()}\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nconst EnhancedHome = withAuth(Home);\nconst EnhancedUser = withAuth(Profile);\n\n/**\n * Auth check\n * @param Component\n * @returns {Function}\n */\nfunction withAuth(Component) {\n  return function (props) {\n    if (props.loggedStatus)\n      return <Component/>;\n    else\n      return <Login/>;\n  }\n}\n\nconst App = connect(mapStateToProps, mapDispatchToProps)(ConnectedApp);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {LOGGED_STATUS, ACTIVE_NAV, USER_LIST, USER_PROFILE} from \"../constants/action-types\";\nimport testapi from '../../test.json';\n\nconst USER_ID = 1;\nconst initialState = {\n  loggedStatus: true,\n  activeNav: 'home',\n  users: testapi,\n  profileId: USER_ID,\n  profile: {}\n};\n\nfunction rootReducer(state = initialState, action) {\n  switch (action.type) {\n    case USER_LIST:\n      return Object.assign({}, state, {users: action.payload});\n    case LOGGED_STATUS:\n      return Object.assign({}, state, {loggedStatus: action.payload});\n    case ACTIVE_NAV:\n      return Object.assign({}, state, {\n        activeNav: action.payload,\n        profile: state.users.find(function (item) {\n          return item.id === USER_ID;\n        })\n      });\n    case USER_PROFILE:\n      return Object.assign({}, state, {\n        activeNav: 'my-profile',\n        profileId: action.payload,\n        profile: state.users.find(function (item) {\n          return item.id === action.payload;\n        })\n      });\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n","import {createStore} from 'redux';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//Styles\n\nimport './css/reset.css';\nimport 'font-awesome/css/font-awesome.css'\nimport './css/style.css';\nimport './css/media.css';\n\nimport App from './js/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./js/store\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}