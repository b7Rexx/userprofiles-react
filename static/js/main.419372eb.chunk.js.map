{"version":3,"sources":["js/components/card.js","js/components/home.js","js/actions/index.js","js/constants/action-types.js","js/components/login.js","js/components/tag.js","js/components/profile.js","js/App.js","serviceWorker.js","js/reducers/index.js","js/store/index.js","index.js"],"names":["Card","color","this","props","className","style","background","src","image","alt","getColor","title","detail","subDetail","width","onClick","id","havingImage","noImage","Component","ConnectedHome","userList","users","map","item","EnhancedCard","key","to","undefined","profileImage","firstName","lastName","phone","email","getUserProfile","Home","connect","state","dispatch","fetch","then","res","json","data","type","payload","profileId","bgColor","Login","Tag","faIcon","ConnectedProfile","addressRows","Object","keys","profile","address","index","split","letter","toUpperCase","toLowerCase","join","getAddress","Profile","ConnectedApp","basename","path","EnhancedMyProfile","EnhancedProfile","EnhancedHome","withAuth","withHeader","changeNavEvent","loggedStatus","activeNav","App","nav","Boolean","window","location","hostname","match","initialState","rootReducer","action","assign","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.419372eb.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Card extends Component {\n\n  getColor() {\n    return {color: this.props.color};\n  }\n\n  havingImage() {\n    return (\n      <div className='card-component clearfix' style={{background: this.props.background}}>\n        <div className='card-img'>\n          <img src={this.props.image} alt=\"image\"/>\n        </div>\n        <div className='card-text' style={this.getColor()}>\n          <strong>{this.props.title}</strong>\n          <p>{this.props.detail}</p>\n          <p>{this.props.subDetail}</p>\n        </div>\n      </div>\n    );\n  }\n\n  noImage() {\n    return (\n      <div className='card-component clearfix' style={{background: this.props.background}}>\n        <div className='card' style={this.getColor()}>\n          <strong>{this.props.title}</strong>\n          <p>{this.props.detail}</p>\n          <p>{this.props.subDetail}</p>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <li style={{width: this.props.width}} onClick={()=>this.props.onClick(this.props.id,this.props.color,this.props.background)}>\n        {this.props.image ? this.havingImage() : this.noImage()}\n      </li>\n    );\n  }\n}\n\nexport default Card;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {userList, userProfile} from \"../actions\";\nimport Card from \"./card\";\nimport {Link} from \"react-router-dom\";\n\nconst mapStateToProps = state => {\n  return {users: state.users};\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    userList: () => (\n      fetch('https://mock-io.herokuapp.com/users')\n        .then(res => res.json())\n        .then(data => dispatch(userList(data)))\n    ),\n    getUserProfile: (profileId, color, bgColor) => {\n      dispatch(userProfile({profileId: profileId, color: color, bgColor: bgColor}))\n    }\n  };\n}\n\nclass ConnectedHome extends Component {\n  componentDidMount() {\n    this.props.userList();\n  }\n\n  render() {\n    return (\n      <div className='user-list'>\n        <ul className='clearfix'>\n          {this.props.users.map(item => (\n            <EnhancedCard key={item.id} {...this.props} item={item}/>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst EnhancedCard = withRouter(Card);\n\nfunction withRouter(Card) {\n  return function (props) {\n    return (\n      <Link to={'/profile?id=' + props.item.id}>\n        <Card\n          key={props.item.id}\n          id={props.item.id}\n          width={300}\n          background={(props.item.id % 4 === 0) ? '#F2AA4C' : undefined}\n          color={(props.item.id % 4 === 0) ? '#101820' : undefined}\n          image={props.item.profileImage}\n          title={props.item.firstName + props.item.lastName}\n          detail={props.item.phone}\n          subDetail={props.item.email}\n          onClick={props.getUserProfile}\n        />\n      </Link>\n    );\n  }\n}\n\nconst Home = connect(mapStateToProps, mapDispatchToProps)(ConnectedHome);\n\nexport default Home;\n","import {LOGGED_STATUS, ACTIVE_NAV, USER_LIST, USER_PROFILE} from \"../constants/action-types\";\n\nexport function userList(payload) {\n  return {type: USER_LIST, payload};\n}\n\nexport function activeNav(payload) {\n  return {type: ACTIVE_NAV, payload};\n}\n\nexport function loggedStatus(payload) {\n  return {type: LOGGED_STATUS, payload};\n}\n\nexport function userProfile(payload) {\n  return {type: USER_PROFILE, payload};\n}\n","export const LOGGED_STATUS = 'LOGGED_STATUS';\nexport const ACTIVE_NAV = 'ACTIVE_NAV';\nexport const USER_LIST = 'USER_LIST';\nexport const USER_PROFILE = 'USER_PROFILE';","import React, {Component} from 'react';\n\nclass Login extends Component {\n  render() {\n    return (\n      <div>\n        Login\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from 'react';\n\n\nfunction Tag(props) {\n  return (\n    <div className='tag'>\n      <i className={'fa fa-' + (props.faIcon)}/>\n      <span>{props.title}</span>\n    </div>\n  );\n}\n\nexport default Tag;","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport Tag from \"./tag\";\n\nconst mapStateToProps = state => {\n  return {color: state.color, bgColor: state.bgColor, profile: state.profile};\n};\n\nclass ConnectedProfile extends Component {\n\n  getAddress() {\n    const addressRows = Object.keys(this.props.profile.address).map((item, index) => {\n      return (\n        <tr key={index}>\n          <td>\n            <strong>\n              {(item.split('').map(function (letter) {\n                if (letter === letter.toUpperCase())\n                  return ' ' + letter.toLowerCase();\n                else\n                  return letter;\n              })).join('')}\n            </strong>\n          </td>\n          <td>{this.props.profile.address[item]}</td>\n        </tr>\n      );\n    });\n    return (\n      <div className='profile-address'>\n        <table>\n          <tbody>\n          {addressRows}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className='user-profile'>\n        <div className='profile-image'\n             style={{background: 'linear-gradient(to bottom,' + this.props.color + ',' + this.props.bgColor + ')'}}>\n          <img src={this.props.profile.profileImage} alt=\"image\"/>\n        </div>\n        <div className='profile-detail' style={{color: this.props.color, background: this.props.bgColor}}>\n          <h1>{this.props.profile.firstName} {this.props.profile.lastName}</h1>\n          <Tag faIcon='envelope' title={this.props.profile.email}/>\n          <Tag faIcon='phone' title={this.props.profile.phone}/>\n          {this.getAddress()}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Profile = connect(mapStateToProps)(ConnectedProfile);\n\nexport default Profile;\n","import React, {Component} from 'react';\nimport {\n  BrowserRouter as Router,\n  Link,\n  Switch,\n  Route\n} from 'react-router-dom';\nimport Home from './components/home';\nimport Login from './components/login';\nimport Profile from \"./components/profile\";\nimport {connect} from \"react-redux\";\nimport {activeNav} from \"./actions\";\n\nconst mapStateToProps = state => {\n  return state;\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeNavEvent: (nav) => dispatch(activeNav(nav))\n  };\n}\n\nclass ConnectedApp extends Component {\n  render() {\n    return (\n      <div className='container'>\n        <Router basename=\"/userprofiles-react\">\n          <div>\n            <Switch>\n              <Route path=\"/my-profile\">\n                <EnhancedMyProfile {...this.props}/>\n              </Route>\n              <Route path=\"/profile\">\n                <EnhancedProfile {...this.props}/>\n              </Route>\n              <Route path=\"/\">\n                <EnhancedHome {...this.props}/>\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nconst EnhancedHome = withAuth(withHeader(Home));\nconst EnhancedProfile = withAuth(withBack(Profile));\nconst EnhancedMyProfile = withAuth(withHeader(Profile));\n\n/**\n * Auth check\n * @param Component\n * @returns {Function}\n */\nfunction withAuth(Component) {\n  return function (props) {\n    if (props.loggedStatus)\n      return <Component {...props}/>;\n    else\n      return <Login/>;\n  }\n}\n\n/**\n * with navigation header\n * @param Component\n * @returns {function(*): *}\n */\nfunction withHeader(Component) {\n  return function (props) {\n    return (\n      <div>\n        <div className='header'>\n          <nav className='navbar clearfix'>\n            <ul>\n              <li className={(props.activeNav === 'home') ? 'active' : ''}>\n                <Link to='/' onClick={() => props.changeNavEvent('home')}>People</Link>\n              </li>\n              <li className={(props.activeNav === 'my-profile') ? 'active' : ''}>\n                <Link to='/my-profile' onClick={() => props.changeNavEvent('my-profile')}>My Profile</Link>\n              </li>\n            </ul>\n          </nav>\n        </div>\n        <div className='content'>\n          <Component {...props}/>\n        </div>\n      </div>\n    );\n  }\n}\n\n/**\n * with back button removing header\n * @param Component\n * @returns {function(*): *}\n */\nfunction withBack(Component) {\n  return function (props) {\n    return (\n      <div>\n        <div className='header'>\n          <div className='profile-nav'>\n            <Link to='/' onClick={() => props.changeNavEvent('home')}><i className='fa fa-arrow-circle-o-left'/></Link>\n            People\n          </div>\n        </div>\n        <div className='content'>\n          <Component {...props}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst App = connect(mapStateToProps, mapDispatchToProps)(ConnectedApp);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {LOGGED_STATUS, ACTIVE_NAV, USER_LIST, USER_PROFILE} from \"../constants/action-types\";\nimport testapi from '../../test.json';\n\nconst USER_ID = 1;\n\nconst initialState = {\n  loggedStatus: true,\n  activeNav: 'home',\n  users: [],\n  profileId: USER_ID,\n  profile:   {\n    \"id\": 1,\n    \"email\": \"jaydon_gislason59@yahoo.com\",\n    \"phone\": \"(998) 970-2799\",\n    \"address\": {\n      \"city\": \"South Nyah\",\n      \"state\": \"New York\",\n      \"country\": \"Equatorial Guinea\",\n      \"zipCode\": \"16308-9260\",\n      \"countryCode\": \"AX\",\n      \"streetAddress\": \"3585 Lucinda Valleys\"\n    },\n    \"lastName\": \"Von\",\n    \"firstName\": \"Walter\",\n    \"profileImage\": \"https://s3.amazonaws.com/uifaces/faces/twitter/jeremyworboys/128.jpg\"\n  }\n};\n\nfunction rootReducer(state = initialState, action) {\n  switch (action.type) {\n    case USER_LIST:\n      return Object.assign({}, state, {users: action.payload});\n    case LOGGED_STATUS:\n      return Object.assign({}, state, {loggedStatus: action.payload});\n    case ACTIVE_NAV:\n      return Object.assign({}, state, {\n        activeNav: action.payload,\n        profile: state.users.find(function (item) {\n          return item.id === USER_ID;\n        })\n      });\n    case USER_PROFILE:\n      return Object.assign({}, state, {\n        activeNav: 'profile',\n        profileId: action.payload.profileId,\n        color: action.payload.color || undefined,\n        bgColor: action.payload.bgColor || undefined,\n        profile: state.users.find(function (item) {\n          return item.id === action.payload.profileId;\n        })\n      });\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;\n","import {createStore} from 'redux';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//Styles\n\nimport './css/reset.css';\nimport 'font-awesome/css/font-awesome.css'\nimport './css/style.css';\nimport './css/media.css';\n\nimport App from './js/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./js/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}